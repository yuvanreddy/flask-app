name: Deploy (Helm)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (dev|stage|prod)"
        required: true
        default: "dev"
      image_tag:
        description: "Image tag to deploy (e.g., commit SHA or semver)"
        required: true
        default: "latest"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      EKS_CLUSTER_NAME: my-flask
      CHART_PATH: charts/flask-app
      RELEASE_NAME: flask
      NAMESPACE: default
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR (for pull secret refresh)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.28.0"

      - name: Ensure kubectl present (fallback install)
        shell: bash
        run: |
          set -e
          if kubectl version --client >/dev/null 2>&1; then exit 0; fi
          curl -fsSLo kubectl https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl

      - name: Update kubeconfig (EKS)
        run: |
          aws eks update-kubeconfig --region "${AWS_REGION}" --name "${EKS_CLUSTER_NAME}"

      - name: Ensure ECR imagePullSecret exists
        shell: bash
        run: |
          set -e
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          PASS=$(aws ecr get-login-password --region "${AWS_REGION}")
          kubectl create secret docker-registry ecr-regcred \
            --docker-server="$REGISTRY" \
            --docker-username=AWS \
            --docker-password="$PASS" \
            --namespace ${NAMESPACE} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Helm upgrade/install
        run: |
          helm upgrade --install ${RELEASE_NAME} ${CHART_PATH} \
            --namespace ${NAMESPACE} \
            --create-namespace \
            --set image.tag=${{ github.event.inputs.image_tag }} \
            --set ingress.enabled=false

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/${RELEASE_NAME}-flask-app --namespace ${NAMESPACE} --timeout=300s || true
          kubectl get deploy,svc,ingress -n ${NAMESPACE}
