name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Configure these in repo Settings -> Variables (preferred) or Secrets (fallback)
      # EKS cluster name (e.g., "flask-devops-cluster")
      EKS_CLUSTER_NAME: my-flask
      # AWS region for ECR/EKS/Terraform
      AWS_REGION: us-east-1
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: terraform_init
      run: terraform init
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Import ECR repo if missing
      shell: bash
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        set -e
        REPO_NAME="myrepo_flask"
        echo "Checking if $REPO_NAME exists in AWS region ${AWS_REGION}..."
        if ! terraform state show aws_ecr_repository.app >/dev/null 2>&1; then
          if aws ecr describe-repositories --repository-names "$REPO_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "Repository exists in AWS. Importing into Terraform state..."
            terraform import aws_ecr_repository.app $REPO_NAME
          else
            echo "Repository does not exist in AWS for region ${AWS_REGION}. Skipping import; Terraform will create it during apply."
          fi
        else
          echo "ECR repo already in Terraform state. Skipping import."
        fi

    - name: Terraform Apply
      id: terraform_apply
      run: terraform apply -auto-approve
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: myrepo_flask
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: "v1.28.0"

    - name: Update kubeconfig (EKS)
      run: |
        echo "Using AWS_REGION=${AWS_REGION} and EKS_CLUSTER_NAME=${EKS_CLUSTER_NAME}"
        aws eks update-kubeconfig --region "${AWS_REGION}" --name "${EKS_CLUSTER_NAME}"

    - name: Deploy to Kubernetes
      run: kubectl apply -f k8s/

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/flask-devops-app-deployment --timeout=180s || true
        echo "\nResources:" && kubectl get deploy,svc,ingress

    - name: Print Ingress URL (with retry)
      run: |
        echo "Waiting for Ingress hostname (up to 10 minutes)..."
        for i in {1..60}; do
          HOST=$(kubectl get ingress -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
          if [ -n "$HOST" ]; then
            echo "Ingress Host: $HOST";
            echo "Test URLs:"; echo "http://$HOST/"; echo "http://$HOST/health";
            exit 0;
          fi
          echo "[$i/60] Ingress hostname not ready yet. Retrying in 10s..."; sleep 10;
        done
        echo "Ingress hostname not available after waiting. Describing ingress:";
        kubectl describe ingress || true
        exit 1
