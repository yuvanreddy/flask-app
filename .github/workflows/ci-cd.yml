name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Configure these in repo Settings -> Variables (preferred) or Secrets (fallback)
      # EKS cluster name (e.g., "flask-devops-cluster")
      EKS_CLUSTER_NAME: my-flask
      # AWS region for ECR/EKS/Terraform
      AWS_REGION: us-east-1
      # When true, skip applying ingress resources (useful when ALB is blocked by account restrictions)
      DISABLE_INGRESS: "true"
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      id: terraform_init
      run: terraform init
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Import ECR repo if missing
      shell: bash
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        set -e
        REPO_NAME="myrepo_flask"
        echo "Checking if $REPO_NAME exists in AWS region ${AWS_REGION}..."
        if ! terraform state show aws_ecr_repository.app >/dev/null 2>&1; then
          if aws ecr describe-repositories --repository-names "$REPO_NAME" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "Repository exists in AWS. Importing into Terraform state..."
            terraform import aws_ecr_repository.app $REPO_NAME
          else
            echo "Repository does not exist in AWS for region ${AWS_REGION}. Skipping import; Terraform will create it during apply."
          fi
        else
          echo "ECR repo already in Terraform state. Skipping import."
        fi

    - name: Terraform Apply
      id: terraform_apply
      run: terraform apply -auto-approve
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: myrepo_flask
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: "v1.28.0"

    - name: Update kubeconfig (EKS)
      run: |
        echo "Using AWS_REGION=${AWS_REGION} and EKS_CLUSTER_NAME=${EKS_CLUSTER_NAME}"
        aws eks update-kubeconfig --region "${AWS_REGION}" --name "${EKS_CLUSTER_NAME}"

    - name: Deploy to Kubernetes (core manifests only when DISABLE_INGRESS=true)
      shell: bash
      run: |
        set -e
        if [ "${DISABLE_INGRESS}" = "true" ]; then
          echo "DISABLE_INGRESS=true -> applying core manifests only (deployment, service, servicemonitor)";
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          if [ -f k8s/servicemonitor.yaml ]; then
            kubectl apply -f k8s/servicemonitor.yaml || true
          fi
        else
          echo "DISABLE_INGRESS not set -> applying entire k8s/ directory";
          kubectl apply -f k8s/
        fi

    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/flask-devops-app-deployment --timeout=180s || true
        echo "\nResources:" && kubectl get deploy,svc,ingress || true

    - name: Port-forward services locally (Flask, Grafana, Prometheus) and validate
      if: always()
      shell: bash
      run: |
        set -euo pipefail
        echo "Starting port-forwards in background..."
        # Flask (default namespace): service port 80 -> localhost:8080
        kubectl port-forward svc/flask-devops-app-service 8080:80 >/tmp/pf_flask.log 2>&1 &
        PF_FLASK_PID=$!

        # Grafana (monitoring ns): service typically exposes port 80 mapped to container 3000
        # Forward localhost:3000 -> service:80
        kubectl -n monitoring port-forward svc/kube-prometheus-stack-grafana 3000:80 >/tmp/pf_grafana.log 2>&1 &
        PF_GRAFANA_PID=$! || true

        # Prometheus (monitoring ns): try common service names
        PROM_SVC=""
        if kubectl -n monitoring get svc kube-prometheus-stack-prometheus >/dev/null 2>&1; then
          PROM_SVC="kube-prometheus-stack-prometheus"
          PROM_SVC_PORT=9090
        elif kubectl -n monitoring get svc prometheus-operated >/dev/null 2>&1; then
          PROM_SVC="prometheus-operated"
          PROM_SVC_PORT=9090
        fi
        if [ -n "${PROM_SVC}" ]; then
          kubectl -n monitoring port-forward svc/${PROM_SVC} 9090:${PROM_SVC_PORT} >/tmp/pf_prom.log 2>&1 &
          PF_PROM_PID=$! || true
        else
          echo "Prometheus service not found; skipping Prometheus port-forward"
        fi

        echo "Waiting for port-forwards to establish..."
        sleep 8

        echo "Validate Flask health endpoint:"
        (curl -sSf http://localhost:8080/health || curl -sSf http://localhost:8080) || echo "Flask health check failed"

        echo "Validate Grafana login page:"
        if curl -sSf http://localhost:3000/login >/dev/null 2>&1; then echo "Grafana reachable on :3000"; else echo "Grafana not reachable"; fi

        echo "Validate Prometheus UI:"
        if curl -sSf http://localhost:9090/graph >/dev/null 2>&1; then echo "Prometheus reachable on :9090"; else echo "Prometheus not reachable"; fi

        echo "Stopping port-forwards..."
        kill ${PF_FLASK_PID} 2>/dev/null || true
        kill ${PF_GRAFANA_PID:-0} 2>/dev/null || true
        kill ${PF_PROM_PID:-0} 2>/dev/null || true

        echo "Port-forward logs:"
        for f in /tmp/pf_*.log; do echo "--- $f ---"; cat "$f" || true; done

    - name: Print Ingress URL (with retry)
      run: |
        echo "Waiting for Ingress hostname (up to 10 minutes)..."
        for i in {1..60}; do
          HOST=$(kubectl get ingress -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
          if [ -n "$HOST" ]; then
            echo "Ingress Host: $HOST";
            echo "Test URLs:"; echo "http://$HOST/"; echo "http://$HOST/health";
            exit 0;
          fi
          echo "[$i/60] Ingress hostname not ready yet. Retrying in 10s..."; sleep 10;
        done
        echo "Ingress hostname not available after waiting. Describing ingress:";
        kubectl describe ingress || true
        exit 1
